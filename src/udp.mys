from fiber import Fiber
from fiber import current
from fiber import suspend

c"""
static void on_send_complete(uv_udp_send_t *request_p, int status)
{
    Socket *socket_p = (Socket *)(request_p->data);

    if (status == -1) {
        fprintf(stderr, "Send error!\n");
    }

    resume(socket_p->_fiber);
}
"""

class Socket:
    c"""
    uv_udp_t m_socket;
    uv_udp_send_t m_send;
    uv_buf_t m_buf;
    """
    _fiber: Fiber?

    func __init__(self):
        c"""
        uv_udp_init(uv_default_loop(), &m_socket);
        m_socket.data = this;
        m_send.data = this;
        """

        self._fiber = None

    func _wait_for_completion(self):
        self._fiber = current()
        suspend()
        self._fiber = None

    func bind(self, port: i64):
        """Bind the socket to given local port. Used both when sending and
        receiving packtes.

        """

        raise NotImplementedError()

    func connect(self, host: string, port: i64):
        """Connect the socket to given remote host and port. Sent packages are
        sent to this address by default.

        """

        raise NotImplementedError()

    func send(self, data: bytes):
        raise NotImplementedError()

    func send_to(self, data: bytes, host: string, port: i64):
        """Send given data to given address.

        """

        host_utf8 = host.to_utf8()
        host_utf8 += 0

        c"""
        struct sockaddr_in addr;
        uv_ip4_addr((const char *)host_utf8.m_bytes->data(), port, &addr);
        m_buf = uv_buf_init((char *)data.m_bytes->data(), data.m_bytes->size());
        uv_udp_send(&m_send,
                    &m_socket,
                    &m_buf,
                    1,
                    (const struct sockaddr *)&addr,
                    on_send_complete);
        """

        self._wait_for_completion()

    func receive(self) -> bytes:
        raise NotImplementedError()

    func receive_from(self) -> (bytes, string, i64):
        raise NotImplementedError()
