from fiber import Fiber
from fiber import current
from fiber import suspend
from io import Reader
from .. import NetError

c"""
class WriteRequest {
public:
    uv_buf_t m_buf;
    uv_write_t m_request;
    Bytes m_data;
    Client *m_client;
};

static void on_client_connected(uv_stream_t *socket_p, int status)
{
    Server *server_p = (Server *)(socket_p->data);

    if (status < 0) {
        return;
    }

    if (server_p->_accepted_clients->__len__() == 10) {
        return;
    }

    mys::shared_ptr<Client> client = mys::make_shared<Client>();

    if (uv_accept(socket_p, (uv_stream_t *)&client->m_socket) == 0) {
        server_p->_accepted_clients->append(client);

        if (server_p->_fiber) {
            resume(server_p->_fiber);
            server_p->_fiber = nullptr;
        }
    }
}

static void on_read_complete(uv_stream_t *request_p,
                             ssize_t nread,
                             const uv_buf_t* buf_p)
{
    Client *client_p = (Client *)(request_p->data);
    bool completed = false;

    if (nread > 0) {
        client_p->_read_offset += nread;

        if (client_p->_read_offset == client_p->_read_end) {
            completed = true;
        }
    } else if (nread < 0) {
        completed = true;
        client_p->_read_data.m_bytes->resize(client_p->_read_offset);
        client_p->_connected = false;
    }

    if (completed) {
        uv_read_stop(request_p);
        resume(client_p->_fiber);
    }
}

static void read_alloc(uv_handle_t *handle_p, size_t size, uv_buf_t *buf_p)
{
    Client *client_p = (Client *)(handle_p->data);

    buf_p->base = ((char *)client_p->_read_data.m_bytes->data()
                   + client_p->_read_offset);
    buf_p->len = client_p->_read_data.m_bytes->size() - client_p->_read_offset;
}

static void on_try_read_into_complete(uv_stream_t *request_p,
                                      ssize_t nread,
                                      const uv_buf_t* buf_p)
{
    Client *client_p = (Client *)(request_p->data);

    if (nread > 0) {
        client_p->_read_offset += nread;
    } else if (nread < 0) {
        client_p->_connected = false;
    }

    uv_read_stop(request_p);
    resume(client_p->_fiber);
}

static void try_read_into_alloc(uv_handle_t *handle_p, size_t size, uv_buf_t *buf_p)
{
    Client *client_p = (Client *)(handle_p->data);

    buf_p->base = ((char *)client_p->_read_data.m_bytes->data()
                   + client_p->_read_offset);
    buf_p->len = client_p->_read_end - client_p->_read_offset;
}

static void on_write_complete(uv_write_t *request_p, int status)
{
    WriteRequest *write_request_p = (WriteRequest *)(request_p->data);

    if (status != 0) {
        write_request_p->m_client->_connected = false;
    }

    delete write_request_p;
}

static void on_close_complete(uv_handle_t *handle_p)
{
    Client *client_p = (Client *)(handle_p->data);

    resume(client_p->_fiber);
}

static void on_shutdown_complete(uv_shutdown_t *request_p, int status)
{
    Client *client_p = (Client *)(request_p->data);

    uv_close((uv_handle_t*)&client_p->m_socket, on_close_complete);
}
"""

class Client(Reader):
    c"""
    uv_tcp_t m_socket;
    uv_buf_t m_buf;
    uv_shutdown_t m_shutdown;
    """
    _read_data: bytes
    _read_offset: u64
    _read_end: u64
    _fiber: Fiber
    _connected: bool

    func __init__(self):
        c"""
        uv_tcp_init(uv_default_loop(), &m_socket);
        m_socket.data = this;
        m_shutdown.data = this;
        """

        self._fiber = None
        self._connected = True

    func __del__(self):
        self.disconnect()

    func _ensure_one_caller(self):
        if self._fiber is not None:
            raise NetError("Only one fiber may perform blocking operations.")

    func _wait_for_completion(self):
        self._fiber = current()
        suspend()
        self._fiber = None

    func is_connected(self) -> bool:
        """Returns true if conencted to the server, false otherwise.

        """

        return self._connected

    func disconnect(self):
        """Disconnect from the server.

        """

        if not self._connected:
            return

        self._ensure_one_caller()

        c"""
        uv_shutdown(&m_shutdown, (uv_stream_t *)&m_socket, on_shutdown_complete);
        """

        self._wait_for_completion()
        self._connected = False

    func write(self, data: bytes):
        """Write given data to the server. Never blocks.

        """

        c"""
        WriteRequest *request_p = new WriteRequest();
        request_p->m_buf = uv_buf_init((char *)data.m_bytes->data(),
                                       data.m_bytes->size());
        request_p->m_request.data = request_p;
        request_p->m_data = data;
        request_p->m_client = this;
        uv_write(&request_p->m_request,
                 (uv_stream_s *)&m_socket,
                 &request_p->m_buf,
                 1,
                 on_write_complete);
        """

    func read(self, size: u64) -> bytes:
        """Read data from the server. Always returns size number of bytes,
        unless the connection was closed, in which case the remaining
        data is returned.

        """

        self._ensure_one_caller()

        self._read_offset = 0
        self._read_end = size
        self._read_data = bytes(size)

        c"""
        if (uv_read_start((uv_stream_t*)&m_socket, read_alloc, on_read_complete) != 0) {
            std::cout << "uv_read_start failed" << std::endl;
            exit(1);
        }
        """

        self._wait_for_completion()

        data = self._read_data
        self._read_data = None

        return data

    func try_read_into(self, data: bytes, offset: u64, size: u64) -> u64:
        """Try to read data from the server into given buffer. Returns number
        of read bytes, which is at least one and at most given size
        bytes, unless the connection was closed, in which case the
        remaining number of bytes is returned.

        """

        self._ensure_one_caller()

        self._read_offset = offset
        self._read_end = offset + size
        self._read_data = data

        c"""
        if (uv_read_start((uv_stream_t*)&m_socket,
                          try_read_into_alloc,
                          on_try_read_into_complete) != 0) {
            std::cout << "uv_read_start failed" << std::endl;
            exit(1);
        }
        """

        self._wait_for_completion()

        self._read_data = None

        return self._read_offset - offset

class Server:
    """A TCP server, listening for clients to connect.

    """

    c"uv_tcp_t m_socket;"
    c"uv_connect_t m_listen;"
    c"uv_buf_t m_buf;"
    _fiber: Fiber
    _status: i32
    _accepted_clients: [Client]

    func __init__(self):
        c"""
        uv_tcp_init(uv_default_loop(), &m_socket);
        m_socket.data = this;
        """

        self._fiber = None
        self._accepted_clients = []

    func listen(self, port: u32):
        """Start listening for clients to connect to given `port` on any
        interface.

        """

        c"""
        struct sockaddr_in address;

        address.sin_family = AF_INET;
        address.sin_addr.s_addr = INADDR_ANY;
        address.sin_port = htons(port);

        uv_tcp_bind(&m_socket, (const struct sockaddr*)&address, 0);
        uv_listen((uv_stream_t *)&m_socket, 10, on_client_connected);
        """

    func accept(self) -> Client:
        """Wait for a client to connect and return it.

        """

        if len(self._accepted_clients) == 0:
            self._fiber = current()
            suspend()

        return self._accepted_clients.pop()
