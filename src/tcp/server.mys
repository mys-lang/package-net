from fiber import Fiber
from fiber import current
from fiber import suspend
from .client import Client
from .errors import TcpError

c"""
static void on_client_connected(uv_stream_t *socket_p, int status)
{
    Server *server_p = (Server *)(socket_p->data);

    if (status < 0) {
        return;
    }

    if (server_p->_accepted_clients->__len__() == 10) {
        return;
    }

    std::shared_ptr<client::Client> client = std::make_shared<client::Client>();

    if (uv_accept(socket_p, (uv_stream_t *)&client->m_socket) == 0) {
        server_p->_accepted_clients->append(client);

        if (server_p->_fiber) {
            resume(server_p->_fiber);
        }
    }
}
"""

class Server:
    """A TCP server, listening for clients to connect.

    """

    c"uv_tcp_t m_socket;"
    c"uv_connect_t m_listen;"
    c"uv_buf_t m_buf;"
    _fiber: Fiber
    _status: i32
    _accepted_clients: [Client]

    def __init__(self):
        c"""
        uv_tcp_init(uv_default_loop(), &m_socket);
        m_socket.data = this;
        """

        self._fiber = None
        self._accepted_clients = []

    def listen(self, port: u32):
        """Start listening for clients to connect to given `port` on any
        interface.

        """

        c"""
        struct sockaddr_in address;

        address.sin_family = AF_INET;
        address.sin_addr.s_addr = INADDR_ANY;
        address.sin_port = htons(port);

        uv_tcp_bind(&m_socket, (const struct sockaddr*)&address, 0);
        uv_listen((uv_stream_t *)&m_socket, 10, on_client_connected);
        """

    def accept(self) -> Client:
        """Wait for a client to connect and return it.

        """

        if len(self._accepted_clients) == 0:
            self._fiber = current()
            suspend()
            self._fiber = None

        return self._accepted_clients.pop()
