from fiber import CancelledError
from fiber import Fiber
from fiber import current
from fiber import sleep
from fiber import suspend
from io import Reader
from io import Writer
from .. import NetError
from .server import Server

c"""
class WriteRequest {
public:
    uv_buf_t m_buf;
    uv_write_t m_request;
    Bytes m_data;
    Client *m_client;
};

static void on_close_complete(uv_handle_t *handle_p)
{
    Client *client_p = (Client *)(handle_p->data);

    resume(client_p->_fiber);
}

static void on_shutdown_complete(uv_shutdown_t *request_p, int status)
{
    Client *client_p = (Client *)(request_p->data);

    uv_close((uv_handle_t*)&client_p->m_socket, on_close_complete);
}

static void on_connect_complete(uv_connect_t *request_p, int status)
{
    Client *client_p = (Client *)(request_p->data);

    client_p->_status = status;

    if (status == 0) {
        resume(client_p->_fiber);
    } else {
        uv_shutdown(&client_p->m_shutdown,
                    (uv_stream_t *)&client_p->m_socket,
                    on_shutdown_complete);
    }
}

static void on_read_complete(uv_stream_t *request_p,
                             ssize_t nread,
                             const uv_buf_t* buf_p)
{
    Client *client_p = (Client *)(request_p->data);
    bool completed = false;

    if (nread > 0) {
        client_p->_read_offset += nread;

        if (client_p->_read_offset == client_p->_read_data.m_bytes->size()) {
            completed = true;
        }
    } else if (nread < 0) {
        completed = true;
        client_p->_read_data.m_bytes->resize(client_p->_read_offset);
        client_p->_error = true;
    }

    if (completed) {
        uv_read_stop(request_p);
        resume(client_p->_fiber);
    }
}

static void read_alloc(uv_handle_t *handle_p, size_t size, uv_buf_t *buf_p)
{
    Client *client_p = (Client *)(handle_p->data);

    buf_p->base = ((char *)client_p->_read_data.m_bytes->data()
                   + client_p->_read_offset);
    buf_p->len = client_p->_read_data.m_bytes->size() - client_p->_read_offset;
}

static void on_write_complete(uv_write_t *request_p, int status)
{
    WriteRequest *write_request_p = (WriteRequest *)(request_p->data);

    if (status != 0) {
        write_request_p->m_client->_error = true;
    }

    delete write_request_p;
}

static void on_getaddrinfo_complete(uv_getaddrinfo_t *resolver_p,
                                    int status,
                                    struct addrinfo *info_p)
{
    Client *client_p = (Client *)(resolver_p->data);

    if (status < 0) {
        fprintf(stderr, "getaddrinfo callback error %s\n", uv_err_name(status));
        return;
    }

    client_p->m_connect.data = client_p;
    uv_tcp_connect(&client_p->m_connect,
                   &client_p->m_socket,
                   (const struct sockaddr*)info_p->ai_addr,
                   on_connect_complete);
    uv_freeaddrinfo(info_p);
}
"""

class Client(Reader):
    c"""
    uv_tcp_t m_socket;
    uv_connect_t m_connect;
    struct addrinfo m_hints;
    uv_getaddrinfo_t m_resolver;
    uv_buf_t m_buf;
    uv_shutdown_t m_shutdown;
    """
    _read_data: bytes
    _read_offset: u64
    _fiber: Fiber
    _status: i32
    _connected: bool
    _error: bool

    func __init__(self):
        c"""
        m_socket.data = this;
        m_shutdown.data = this;
        """

        self._fiber = None
        self._connected = False
        self._error = False

    func __del__(self):
        self.disconnect()

    func _ensure_one_caller(self):
        if self._fiber is not None:
            raise NetError("Only one fiber may perform blocking operations.")

    func _wait_for_completion(self):
        self._fiber = current()
        suspend()
        self._fiber = None

    func is_connected(self) -> bool:
        """Returns true if conencted to the server, false otherwise.

        """

        return self._connected and not self._error

    func connect(self, host: string, port: u32):
        """Connect to a server using given `host` and `port`. Reconnects
        if already connected.

        """

        self.disconnect()
        self._ensure_one_caller()

        host_utf8 = host.to_utf8()
        host_utf8 += 0
        port_utf8 = str(port).to_utf8()
        port_utf8 += 0

        c"""
        uv_tcp_init(uv_default_loop(), &m_socket);
        m_resolver.data = this;

        m_hints.ai_family = PF_INET;
        m_hints.ai_socktype = SOCK_STREAM;
        m_hints.ai_protocol = IPPROTO_TCP;
        m_hints.ai_flags = 0;

        uv_getaddrinfo(uv_default_loop(),
                       &m_resolver,
                       on_getaddrinfo_complete,
                       (const char *)host_utf8.m_bytes->data(),
                       (const char *)port_utf8.m_bytes->data(),
                       &m_hints);
        """

        self._wait_for_completion()

        if self._status != 0:
            raise NetError(f"Connect to {host}:{port} failed.")

        self._connected = True

    func disconnect(self):
        """Disconnect from the server.

        """

        if not self._connected:
            return

        self._ensure_one_caller()

        c"""
        uv_shutdown(&m_shutdown, (uv_stream_t *)&m_socket, on_shutdown_complete);
        """

        self._wait_for_completion()
        self._error = False
        self._connected = False

    func write(self, data: bytes):
        """Write data to the server. Never blocks. Raises an error if the client
        is disconnedted.

        """

        if not self.is_connected():
            raise NetError("Not connected.")

        c"""
        WriteRequest *request_p = new WriteRequest();
        request_p->m_buf = uv_buf_init((char *)data.m_bytes->data(),
                                       data.m_bytes->size());
        request_p->m_request.data = request_p;
        request_p->m_data = data;
        request_p->m_client = this;
        uv_write(&request_p->m_request,
                 (uv_stream_s *)&m_socket,
                 &request_p->m_buf,
                 1,
                 on_write_complete);
        """

    func read(self, size: u64) -> bytes:
        """Read data from the server. Always returns size number of bytes,
        unless the connection was closed, in which case the remaining
        data is returned.

        """

        if not self.is_connected():
            return b""

        self._ensure_one_caller()

        self._read_offset = 0;
        self._read_data = bytes(size)

        c"""
        uv_read_start((uv_stream_t *)&m_socket, read_alloc, on_read_complete);
        """

        self._fiber = current()

        try:
            suspend()
        except CancelledError:
            c"uv_read_stop((uv_stream_t *)&m_socket);"
            self._read_data = None
            raise
        finally:
            self._fiber = None

        data = self._read_data
        self._read_data = None

        return data

class _ServerCommunicationFiber(Fiber):
    server: Server

    func run(self):
        client = self.server.accept()
        assert client.is_connected()

        assert client.read(1) == b"1"
        assert client.read(9) == b"234567890"
        client.write(b"0")
        client.write(b"987654321")

        data = bytes(10)
        offset: u64 = 0
        left = len(data)

        while left > 0:
            size = client.try_read_into(data, offset, left)
            assert size > 0
            offset += size
            left -= size

        assert data == b"1234567890"
        client.write(b"0")
        client.write(b"987654321")

        assert client.read(1) == b""
        assert not client.is_connected()

@test
func test_server_communication():
    port: u32 = 50222

    server = Server()
    server.listen(port)
    server_fiber = _ServerCommunicationFiber(server)
    server_fiber.start()

    client = Client()
    assert not client.is_connected()
    client.connect("localhost", port)
    assert client.is_connected()

    client.write(b"123456789")
    client.write(b"0")
    assert client.read(9) == b"098765432"
    assert client.read(1) == b"1"

    client.write(b"123456789")
    # To make try_read_into() not read all at once.
    sleep(0.2)
    client.write(b"0")
    assert client.read(9) == b"098765432"
    assert client.read(1) == b"1"

    client.disconnect()
    assert not client.is_connected()
    server_fiber.join()

@test
func test_connection_refused():
    port: u32 = 50223

    client = Client()

    try:
        message = ""
        client.connect("localhost", port)
    except NetError as e:
        message = e.message

    assert message == "Connect to localhost:50223 failed."
    assert not client.is_connected()

class _ClientReadCloseFiber(Fiber):
    server: Server

    func run(self):
        client = self.server.accept()
        assert client.is_connected()
        client.write(b"1234567890")
        client.disconnect()

@test
func test_client_read_close():
    port: u32 = 50224

    server = Server()
    server.listen(port)
    server_fiber = _ClientReadCloseFiber(server)
    server_fiber.start()

    client = Client()
    client.connect("localhost", port)
    assert client.read(20) == b"1234567890"
    assert client.read(1) == b""
    client.disconnect()
    server_fiber.join()

class _ClientReUseFiber(Fiber):
    server: Server

    func run(self):
        for _ in range(10):
            client = self.server.accept()
            assert client.read(1) == b""
            client.disconnect()
            client.disconnect()
            client.disconnect()
            client = self.server.accept()
            assert client.read(1) == b""
            client.disconnect()
            client = self.server.accept()
            assert client.read(1) == b""
            client.disconnect()

@test
func test_client_re_use_client():
    port: u32 = 50225

    server = Server()
    server.listen(port)
    server_fiber = _ClientReUseFiber(server)
    server_fiber.start()

    client = Client()

    for i in range(10):
        client.connect("localhost", port)
        client.disconnect()
        client.disconnect()
        client.disconnect()
        client.connect("localhost", port)
        client.connect("localhost", port)
        client.disconnect()

    server_fiber.join()

class _ClientCancelFiber(Fiber):
    port: u32

    func run(self):
        client = Client()
        client.connect("localhost", self.port)
        client.write(b"1")

        try:
            client.read(1)
        except CancelledError:
            client.write(b"2")
            assert client.read(1) == b"3"

@test
func test_client_cancel():
    port: u32 = 50226

    server = Server()
    server.listen(port)

    client_fiber = _ClientCancelFiber(port)
    client_fiber.start()

    client = server.accept()
    assert client.read(1) == b"1"
    client_fiber.cancel()
    assert client.read(1) == b"2"
    client.write(b"3")
    client_fiber.join()
