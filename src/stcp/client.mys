from ..secure import Connection as SecureConnection
from ..secure import Context as SecureContext
from ..secure import IOHandler
from ..tcp.client import Client as TcpClient

class _IOHandler(IOHandler):
    _tcp_client: TcpClient

    def __init__(self, tcp_client: TcpClient):
        self._tcp_client = tcp_client

    def write(self, data: bytes):
        self._tcp_client.write(data)

    def read(self, size: u32) -> bytes:
        return self._tcp_client.read(size)

class Client:
    """A secure TCP client using SSL/TLS.

    """

    _tcp_client: TcpClient
    _secure_connection: SecureConnection

    def __init__(self, context: SecureContext = None):
        self._tcp_client = TcpClient()
        self._secure_connection = SecureConnection(context,
                                                   _IOHandler(self._tcp_client))

    def __del__(self):
        self.disconnect()

    def is_connected(self) -> bool:
        """Returns true if conencted to the server, false otherwise.

        """

        return self._secure_connection.is_connected()

    def connect(self, host: string, port: u32):
        """Connect to a server using given `host` and `port`.

        """

        self._tcp_client.connect(host, port)
        self._secure_connection.connect()

    def disconnect(self):
        """Disconnect from the server.

        """

        self._secure_connection.disconnect()
        self._tcp_client.disconnect()

    def write(self, data: bytes):
        """Write data to the server.

        """

        self._secure_connection.write(data)

    def read(self, size: u32) -> bytes:
        """Read data from the server. Always returns exactly given number of
        bytes, or None if disconnected.

        """

        return self._secure_connection.read(size)
