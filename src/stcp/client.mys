from fiber import Fiber
from .. import NetError
from ..secure import Connection as SecureConnection
from ..secure import Context as SecureContext
from ..secure import IOHandler
from ..tcp.client import Client as TcpClient
from ..tcp.server import Server as TcpServer
from io import Reader

class _IOHandler(IOHandler):
    _tcp_client: TcpClient

    func __init__(self, tcp_client: TcpClient):
        self._tcp_client = tcp_client

    func write(self, data: bytes):
        self._tcp_client.write(data)

    func read(self, size: u64) -> bytes:
        return self._tcp_client.read(size)

class Client(Reader):
    """A secure TCP client using SSL/TLS.

    """

    _tcp_client: TcpClient
    _secure_connection: SecureConnection

    func __init__(self, context: SecureContext = SecureContext()):
        self._tcp_client = TcpClient()
        self._secure_connection = SecureConnection(context,
                                                   _IOHandler(self._tcp_client))

    func __del__(self):
        pass

    func is_connected(self) -> bool:
        """Returns true if conencted to the server, false otherwise.

        """

        return self._secure_connection.is_connected()

    func connect(self, host: string, port: u32):
        """Connect to a server using given `host` and `port`.

        """

        self._tcp_client.connect(host, port)
        self._secure_connection.connect()

    func disconnect(self):
        """Disconnect from the server.

        """

        self._secure_connection.disconnect()
        self._tcp_client.disconnect()

    func write(self, data: bytes):
        """Write data to the server.

        """

        self._secure_connection.write(data)

    func read(self, size: u64) -> bytes:
        """Read data from the server. Always returns exactly given number of
        bytes, or None if disconnected.

        """

        return self._secure_connection.read(size)

# class _ServerCommunicationFiber(Fiber):
#     server: TcpServer
#
#     func run(self):
#         client = self.server.accept()
#         assert client.is_connected()
#         assert client.read(1) == b"1"
#         assert client.read(9) == b"234567890"
#         client.write(b"0")
#         client.write(b"987654321")
#         assert client.read(1) is None
#         assert not client.is_connected()
#
# test server_communication():
#     port: u32 = 50232
#
#     server = TcpServer()
#     server.listen(port)
#     server_fiber = _ServerCommunicationFiber(server)
#     server_fiber.start()
#
#     client = Client()
#     assert not client.is_connected()
#     client.connect("localhost", port)
#     # assert client.is_connected()
#     # client.write(b"123456789")
#     # client.write(b"0")
#     # assert client.read(9) == b"098765432"
#     # assert client.read(1) == b"1"
#     #
#     # client.disconnect()
#     # assert not client.is_connected()
#     # server_fiber.join()
